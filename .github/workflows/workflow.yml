name: Colcon Build, Test, Coverage and Autoformat

on:
  pull_request:
    branches:
      - dev
      - pre-release
      - release

  workflow_dispatch:

jobs:
  Autoformat:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@main
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 2

      - name: Clang-format style check
        uses: THI-Drone/action-clang-format@main

      - name: Autopep8 style check
        uses: THI-Drone/action-autopep@main


  Build-and_test:
    runs-on: self-hosted

    steps:

    - name: Get the date
      id: date
      run: echo "date=$(date +'%F_%H-%M-%S')" >> $GITHUB_OUTPUT

    - name: Setup Docker Container 
      run: | 
        docker pull ros:humble
        docker rm -f ros-container || true
        docker run --name ros-container -i -d ros:humble bash

    - name: install dependencies
      run: |
        docker exec -i ros-container /bin/bash -c "apt-get update && apt-get install -y nlohmann-json3-dev && apt-get install -y python3-pip && pip install setuptools==58.2.0 && pip install pytest && rosdep update && pip install pytest coverage && pip install colcon-coveragepy-result && pip install pytest coverage pytest-cov && apt-get install ros-humble-ament-cmake -y && apt-get install ros-humble-ament-cmake-clang-format -y && apt-get install ros-humble-ament-cmake-cppcheck -y && apt-get install ros-humble-ament-cmake-cpplint -y && apt-get install ros-humble-ament-cmake-flake8 -y && apt-get install ros-humble-ament-cmake-lint-cmake -y && apt-get install ros-humble-ament-cmake-pep257 -y && apt-get install gcc lcov -y && apt-get install python3-colcon-lcov-result"

    - name: Clone repository
      run: |
        REPONAME=$(basename ${{github.repository}})
        docker exec -i ros-container /bin/bash -c "git clone --recursive --branch dev https://github.com/THI-Drone/thi-drone-ws.git && cd thi-drone-ws && git submodule foreach git checkout dev && git submodule foreach git pull origin dev"
        docker exec -i ros-container /bin/bash -c "source /opt/ros/humble/setup.bash && cd thi-drone-ws/src/$REPONAME && git fetch --all && git checkout ${{ github.head_ref }}"
        
    - name: Build and test
      run: |
        REPONAME=$(basename ${{github.repository}})
        docker exec -i ros-container /bin/bash -c "source /opt/ros/humble/setup.bash && cd thi-drone-ws/ && rosdep fix-permissions && rosdep update && rosdep install --from-paths src --ignore-src -r -y"
        docker exec -i ros-container /bin/bash -c "source /opt/ros/humble/setup.bash && cd thi-drone-ws/ && colcon build --packages-up-to $REPONAME --cmake-args -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS='--coverage' -DCMAKE_EXPORT_COMPILE_COMMANDS=O && colcon lcov-result --initial --packages-up-to $REPONAME && colcon test --packages-up-to $REPONAME --pytest-args '--cov=.' '--cov-report=html' && colcon lcov-result --packages-up-to $REPONAME && colcon test-result --all && colcon coveragepy-result"
        docker exec -i ros-container /bin/bash -c " if [ -f /thi-drone-ws/log/latest_test/$REPONAME/stdout_stderr.log ]; then cat /thi-drone-ws/log/latest_test/$REPONAME/stdout_stderr.log; fi"

    - name: Copy coverage report from container to workspace
      id: copy-coverage
      run: |
        REPONAME=$(basename ${{github.repository}})
        rm -rf ./coverage
        rm -rf ./stdout_stderr.log

        htmlcov_exists=$(docker exec ros-container test -d /thi-drone-ws/src/$REPONAME/htmlcov && echo yes || echo no)
        if [ "$htmlcov_exists" == "yes" ]; then docker cp ros-container:/thi-drone-ws/src/$REPONAME/htmlcov ./coverage; fi

        lcov_exists=$(docker exec ros-container test -d /thi-drone-ws/lcov && echo yes || echo no)
        if [ "$lcov_exists" == "yes" ]; then docker cp ros-container:/thi-drone-ws/lcov ./coverage; fi

        log_exists=$(docker exec ros-container test -f /thi-drone-ws/log/latest_test/$REPONAME/stdout_stderr.log && echo yes || echo no)
        if [ "$log_exists" == "yes" ]; then echo "{log_exists}={'yes'}" >> $GITHUB_OUTPUT && docker cp ros-container:/thi-drone-ws/log/latest_test/$REPONAME/stdout_stderr.log ./stdout_stderr.log; else echo "{log_exists}={'no'}" >> $GITHUB_OUTPUT; fi
        

    - name: PR comment
      uses: thollander/actions-comment-pull-request@v2
      if: steps.copy-coverage.outputs.log_exists == 'yes'
      with:
        filePath: ./stdout_stderr.log

    - name: Upload coverage report
      uses: actions/upload-artifact@main
      with:
        name: coverage-report-${{ steps.date.outputs.date }}
        path: ./coverage

    - name: Copy logs from container to workspace
      if: failure()
      run: |
        REPONAME=$(basename ${{github.repository}})
        rm -rf ./log
        docker cp ros-container:/thi-drone-ws/log ./log
    
    - name: Upload build-logs
      uses: actions/upload-artifact@main
      if: failure()
      with:
        name: build-logs-${{ steps.date.outputs.date }}
        path: ./log
      


